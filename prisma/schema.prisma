generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AccountRequest {
  id             String    @unique
  name           String
  companyName    String
  companyType    String
  companyRegNo   String
  companyDetails String
  taxNumber      String
  address        String
  city           String
  country        String
  email          String    @unique
  phone          String    @unique
  message        String
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @updatedAt

  @@id([id])
  @@map("account_requests")
}

model Admin {
  id    String @unique
  name  String
  phone String @unique

  user User?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@id([id])
  @@map("admins")
}

model Customer {
  id             String         @unique
  name           String
  companyName    String
  companyType    String
  companyRegNo   String
  companyDetails String
  taxNumber      String
  address        String
  city           String
  country        String
  phone          String         @unique
  status         CustomerStatus @default(active)

  user User?

  createdAt     DateTime?              @default(now())
  updatedAt     DateTime?              @updatedAt
  orders        Order[]
  notifications CustomerNotification[]

  @@id([id])
  @@map("customers")
}

model User {
  id       String   @unique
  username String   @unique
  email    String   @unique
  password String
  role     UserRole @default(customer)

  customerId String?   @unique
  customer   Customer? @relation(fields: [customerId], references: [id], map: "user_customer_id")

  adminId String? @unique
  admin   Admin?  @relation(fields: [adminId], references: [id], map: "user_admin_id")

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@id([id])
  @@map("users")
}

model Category {
  id            String          @unique
  title         String          @unique
  icon          String
  createdAt     DateTime?       @default(now())
  updatedAt     DateTime?       @updatedAt
  subCategories SubCategory[]
  products      Product[]
  brands        CategoryBrand[]

  @@id([id])
  @@map("categories")
}

model SubCategory {
  id         String    @unique
  title      String    @unique
  icon       String?
  categoryId String
  category   Category  @relation(fields: [categoryId], references: [id], map: "sub_category_category_id")
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  products   Product[]

  @@id([id])
  @@map("sub_categories")
}

model Brand {
  id         String          @unique
  title      String          @unique
  logo       String
  createdAt  DateTime?       @default(now())
  updatedAt  DateTime?       @updatedAt
  products   Product[]
  categories CategoryBrand[]

  @@id([id])
  @@map("brands")
}

model CategoryBrand {
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], map: "category_brand_category_id")
  brandId    String
  brand      Brand    @relation(fields: [brandId], references: [id], map: "category_brand_brand_id")

  @@id([categoryId, brandId])
  @@map("category_brands")
}

model Product {
  id            String        @unique
  title         String
  image         String
  netWeight     String
  packetPerBox  String
  status        ProductStatus @default(active)
  type          ProductType
  categoryId    String
  category      Category      @relation(fields: [categoryId], references: [id], map: "product_category_id")
  subCategoryId String
  subCategory   SubCategory   @relation(fields: [subCategoryId], references: [id], map: "product_sub_category_id")
  brandId       String
  brand         Brand         @relation(fields: [brandId], references: [id], map: "product_brand_id")
  createdAt     DateTime?     @default(now())
  updatedAt     DateTime?     @updatedAt
  orders        OrderItem[]

  @@id([id])
  @@map("products")
}

model Order {
  id         String      @unique
  customerId String
  customer   Customer    @relation(fields: [customerId], references: [id], map: "order_customer_id")
  status     OrderStatus @default(requestQuotation)
  quotation  String?
  invoice    String?

  createdAt DateTime?   @default(now())
  updatedAt DateTime?   @updatedAt
  products  OrderItem[]

  @@id([id])
  @@map("orders")
}

model OrderItem {
  productId String
  product   Product @relation(fields: [productId], references: [id], map: "order_item_product_id")
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], map: "order_item_order_id")
  quantity  Int

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@id([orderId, productId])
  @@map("order_items")
}

model AdminNotification {
  id        Int                    @unique @default(autoincrement())
  title     String
  message   String
  type      AdminNotificationType?
  refId     String?
  read      Boolean                @default(false)
  createdAt DateTime?              @default(now())
  updatedAt DateTime?              @updatedAt

  @@id([id])
  @@map("admin_notifications")
}

model CustomerNotification {
  id         Int                       @unique @default(autoincrement())
  customerId String
  customer   Customer                  @relation(fields: [customerId], references: [id], map: "customer_notification_customer_id")
  type       CustomerNotificationType?
  refId      String?
  title      String
  message    String
  url        String?
  read       Boolean                   @default(false)
  createdAt  DateTime?                 @default(now())
  updatedAt  DateTime?                 @updatedAt

  @@id([id])
  @@map("user_notifications")
}

enum OrderStatus {
  requestQuotation
  quotationApproved
  spam
  ordered
  declined
  orderInProcess
  delivered
}

enum ProductStatus {
  active
  disabled
}

enum ProductType {
  dry
  frozen
}

enum CustomerStatus {
  active
  disabled
}

enum UserRole {
  admin
  customer
}

enum AdminNotificationType {
  AccountRequest
  quotationRequest
  confirmOrder
  declineOrder
}

enum CustomerNotificationType {
  quotationApproved
  quotationDeclined
  invoiceAdded
}
